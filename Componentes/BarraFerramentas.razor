@using DiagramaDeClasse.Modelos
@using DiagramaDeClasse.Servicos
@inject ServicoArmazenamentoBase ServicoArmazenamento
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime

<MudPaper Class="pa-2 mb-2" Elevation="2">
    <MudStack Row Spacing="1" AlignItems="AlignItems.Center">

        <MudSelect T="TipoDiagrama" 
                   Value="_tipoSelecionado"
                   ValueChanged="TipoSelecionadoChanged"
                   Label="Tipo de Diagrama" 
                   Variant="Variant.Outlined" 
                   Dense="true"
                   Style="min-width: 200px;"
                   ToStringFunc="@(t => t?.Nome ?? string.Empty)">
            @foreach (var tipo in _tiposDiagrama)
            {
                <MudSelectItem Value="@tipo">@tipo.Nome</MudSelectItem>
            }
        </MudSelect>

        <MudButton Variant="Variant.Text" 
                   Color="Color.Info"
                   StartIcon="@Icons.Material.Filled.Lightbulb"
                   OnClick="AbrirExemplo"
                   Size="Size.Small">
            Exemplo
        </MudButton>
        <MudDivider Vertical="true" FlexItem="true" />
        <MudButton Variant="Variant.Text" 
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.Save"
                   OnClick="SalvarArquivo"
                   Size="Size.Small">
            Salvar
        </MudButton>
        <MudButton Variant="Variant.Text" 
                   Color="Color.Secondary"
                   StartIcon="@Icons.Material.Filled.FolderOpen"
                   OnClick="AbrirArquivo"
                   Size="Size.Small">
            Abrir
        </MudButton>
        <MudSpacer />
        <MudButton Variant="Variant.Text" 
                   Color="Color.Success"
                   StartIcon="@Icons.Material.Filled.Settings"
                   OnClick="AbrirConfiguracaoIA"
                   Size="Size.Small">
            Configurar IA
        </MudButton>
        <MudButton Variant="Variant.Text" 
                   Color="Color.Info"
                   StartIcon="@Icons.Material.Filled.Info"
                   OnClick="AbrirSobre"
                   Size="Size.Small">
            Sobre
        </MudButton>
    </MudStack>
</MudPaper>

@code {
    [Parameter] public DiagramaMermaid Diagrama { get; set; } = new();
    [Parameter] public EventCallback<DiagramaMermaid> OnDiagramaCarregado { get; set; }
    [Parameter] public EventCallback<string> OnTipoAlterado { get; set; }

    private List<TipoDiagrama> _tiposDiagrama = TipoDiagrama.ObterTodos();
    private TipoDiagrama _tipoSelecionado = TipoDiagrama.ObterTodos().First();
    
    private async Task TipoSelecionadoChanged(TipoDiagrama novoTipo)
    {
        if (_tipoSelecionado?.Nome != novoTipo?.Nome)
        {
            _tipoSelecionado = novoTipo;
            await OnTipoAlterado.InvokeAsync(novoTipo.Nome);
        }
    }
    
    private async Task SalvarArquivo()
    {
        var sucesso = await JSRuntime.InvokeAsync<bool>("salvarArquivo", Diagrama.Codigo, "diagrama");
        if (sucesso)
        {
            Snackbar.Add("Arquivo salvo com sucesso!", Severity.Success);
        }
    }
    
    private async Task AbrirArquivo()
    {
        try
        {
            var conteudo = await JSRuntime.InvokeAsync<string>("abrirArquivo");
            if (!string.IsNullOrEmpty(conteudo))
            {
                // Detecta o tipo do diagrama pelo conteúdo
                var tipoDetectado = DetectarTipoDiagrama(conteudo);
                
                // Muda o dropdown se necessário
                if (tipoDetectado != null && tipoDetectado.Nome != _tipoSelecionado.Nome)
                {
                    _tipoSelecionado = tipoDetectado;
                    await OnTipoAlterado.InvokeAsync(tipoDetectado.Nome);
                    await Task.Delay(100); // Aguarda mudança de tipo
                }
                
                // Carrega o diagrama
                var diagramaAberto = new DiagramaMermaid();
                diagramaAberto.AtualizarCodigo(conteudo);
                await OnDiagramaCarregado.InvokeAsync(diagramaAberto);
                Snackbar.Add("Arquivo aberto com sucesso!", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao abrir arquivo: {ex.Message}", Severity.Error);
        }
    }
    
    private TipoDiagrama? DetectarTipoDiagrama(string codigo)
    {
        var codigoLower = codigo.Trim().ToLower();
        
        if (codigoLower.StartsWith("classdiagram")) return _tiposDiagrama.FirstOrDefault(t => t.Nome == "Diagrama de Classe");
        if (codigoLower.StartsWith("flowchart") || codigoLower.StartsWith("graph")) return _tiposDiagrama.FirstOrDefault(t => t.Nome == "Fluxograma");
        if (codigoLower.StartsWith("sequencediagram")) return _tiposDiagrama.FirstOrDefault(t => t.Nome == "Diagrama de Sequência");
        if (codigoLower.StartsWith("statediagram")) return _tiposDiagrama.FirstOrDefault(t => t.Nome == "Diagrama de Estado");
        if (codigoLower.StartsWith("erdiagram")) return _tiposDiagrama.FirstOrDefault(t => t.Nome == "Diagrama ER");
        if (codigoLower.StartsWith("gantt")) return _tiposDiagrama.FirstOrDefault(t => t.Nome == "Gráfico de Gantt");
        if (codigoLower.StartsWith("pie")) return _tiposDiagrama.FirstOrDefault(t => t.Nome == "Gráfico de Pizza");
        if (codigoLower.StartsWith("journey")) return _tiposDiagrama.FirstOrDefault(t => t.Nome == "Jornada do Usuário");
        if (codigoLower.StartsWith("gitgraph")) return _tiposDiagrama.FirstOrDefault(t => t.Nome == "Diagrama Git");
        if (codigoLower.StartsWith("mindmap")) return _tiposDiagrama.FirstOrDefault(t => t.Nome == "Mindmap");
        if (codigoLower.StartsWith("timeline")) return _tiposDiagrama.FirstOrDefault(t => t.Nome == "Timeline");
        
        return null;
    }
    

    
    private async Task AbrirExemplo()
    {
        var parameters = new DialogParameters<DialogoHelp>
        {
            { x => x.TipoDiagrama, _tipoSelecionado.Nome }
        };
        
        await DialogService.ShowAsync<DialogoHelp>($"Como usar {_tipoSelecionado.Nome}", parameters, new DialogOptions
        {
            MaxWidth = MaxWidth.Large,
            FullWidth = true
        });
    }
    
    private async Task AbrirConfiguracaoIA()
    {
        await DialogService.ShowAsync<DialogoConfiguracaoIA>("Configuração de IA", new DialogOptions
        {
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        });
    }
    
    private async Task AbrirSobre()
    {
        await DialogService.ShowAsync<DialogoSobre>("Sobre", new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        });
    }
}